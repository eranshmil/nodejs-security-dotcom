---
import { SEO } from 'astro-seo';
import { Image } from 'astro:assets';
import { getRelativeUrlByFilePath } from '~/utils/directories';

import defaultImage from '~/assets/images/src/assets/images/nodejs-secure-coding-website-og.png';

import { SITE } from '~/config.mjs';
import Fonts from '../atoms/Fonts.astro';
import ExtraMetaTags from '../atoms/ExtraMetaTags.astro';
import WebAnalytics from './WebAnalytics.astro';

// const { src: defaultImage } = await getImage({
// 	src: defaultImageSrc,
// 	width: 1200,
// 	height: 628,
// });

// const defaultImage = new URL(defaultImageSrc, Astro.site);

const {
	title = SITE.name,
	description = '',

	canonical,
	noindex = false,
	nofollow = false,

	ogTitle = title,
	ogType = 'website',
} = Astro.props;

let { image: _image } = Astro.props;
_image = _image || defaultImage;

// console.log({ _image });
// console.log(new URL(_image.src, Astro.site));

const image =
	typeof _image === 'string'
		? new URL(_image, Astro.site)
		: _image && typeof _image['src'] !== 'undefined'
		? new URL(getRelativeUrlByFilePath(_image.src), Astro.site)
		: null;
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<SEO
	title={title}
	description={description}
	canonical={canonical}
	noindex={noindex}
	nofollow={nofollow}
	openGraph={{
		basic: {
			url: canonical,
			title: ogTitle,
			type: ogType,
			image: _image?.src ? _image.src : defaultImage.toString(),
		},
		image: {
			url: image.toString(),
			secureUrl: image.toString(),
			alt: ogTitle,
			height: _image?.height,
			width: _image?.width,
			type: _image?.format && `image/${_image.format}`,
		},
	}}
	twitter={{
		creator: '@liran_tal',
		image: image ? image.toString() : undefined,
		imageAlt: ogTitle,
		description: description,
		card: image ? 'summary_large_image' : 'summary',
	}}
/>

<Fonts />

<ExtraMetaTags />

<WebAnalytics />
